;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; My .emacs for Ubuntu 10.4
;;
;; Author    : Davide Angelocola <davide.angelocola@gmail.com>
;; Time-stamp: <2010-07-15 08:54:46 dfa>
;;
;; forked from "dotemacs-windows" 
;;   - removed windows specific stuff
;;   - removed ELPA 
;;   - removed ERC
;;   - global key bindings at end of file
;;   - re-added C stuff


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Variables

;; my home
(setq default-directory "/home/dfa/")

;; inhibit startup message
(setq inhibit-startup-message t)

;; setting username, email address and other stuff
(setq user-full-name "Davide Angelocola")
(setq user-mail-address "davide.angelocola@gmail.com")
(setq current-language-environment "English")

;; see what I'm typing *immediately*
(setq echo-keystrokes 0.01)

;; enabling case-fold-search
(setq case-fold-search t)

;; change backup behavior to save in a directory, not in a miscellany
;; of files all over the place
(setq backup-by-copying t
      backup-directory-alist '(("." . "~/.saves"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control nil)

;; _always_ require final newline
(setq require-final-newline t)

;; set dynamic abbreviations to case rude
(setq dabbrev-case-fold-search nil)
(setq save-abbrevs nil)

;; cursor follow compilation's output
(setq compilation-scroll-output t)

;; make all "yes or no" prompts show "y or n" instead
(fset 'yes-or-no-p 'y-or-n-p)

;; disabling narrowing
(put 'narrow-to-region 'disabled nil)

;; allow a command to erase an entire buffer
(put 'erase-buffer 'disabled nil)

;; the following reduces the amount of warning signals but does not
;; turn them off in general
(setq ring-bell-function
      (lambda ()
	(unless (memq this-command
		      '(isearch-abort
			abort-recursive-edit
			exit-minibuffer
			keyboard-quit))
	  (ding))))

;; date and time
(setq calendar-week-start-day 1)
(setq european-calendar-style 't)

;; the bullet indicates the start of a new paragraph
;; (setq paragraph-start "\\*\\|$\\|-"
;;       paragraph-separate "$")

;; sentences
;; (setq sentence-end "[.?!][]\"')}]*\\($\\|[ \t]\\)[ \t\n]*"
;;       sentence-end-double-space nil)

;; completion ignores filenames ending in any string in this list
(setq completion-ignored-extensions
      '(".o" ".lo" ".so" ".elc" ".class"))

;; do a "chmod u+x" when you save a script file (starting with "#!")
(add-hook 'after-save-hook
	  'executable-make-buffer-file-executable-if-script-p)

;; update timestamp
(add-hook 'before-save-hook 
	  'time-stamp)

;; don't echo passwords when communicating with interactive programs
(add-hook 'comint-output-filter-functions 
	  'comint-watch-for-password-prompt)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FlySpell

;; ...and try to speedup it
(setq ispell-extra-args 
      '("--sug-mode=ultra"))

;; sort corrections
(setq flyspell-sort-corrections 
      nil)

;; enable flyspell only for text-mode
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda ()
		   (flyspell-mode 1))))

;; enable flyspell-prog-mode for some modes
(dolist (hook '(html-mode-hook
		css-mode-hook
		clojure-mode-hook
		emacs-lisp-mode-hook))
  (add-hook hook (lambda ()
		   (flyspell-prog-mode))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Font lock mode

;; enable font locking globally
(global-font-lock-mode t)

;; highlight FIXME, TODO and XXX as warning in some major modes
(dolist (mode '(
		latex-mode
		LaTeX-mode
		html-mode
		css-mode
		clojure-mode
		emacs-lisp-mode))
  (font-lock-add-keywords mode 
			  '(("\\(XXX\\|FIXME\\|TODO\\)" 
			     1 font-lock-warning-face prepend))))

;; font customizations
(setq font-lock-maximum-decoration t
      font-lock-maximum-size nil)

(setq font-lock-support-mode 'jit-lock-mode
      fast-lock-cache-directories '("~/.emacs-flc"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; VC 

;; prompt for initial comment when a file is registered
(setq vc-initial-comment t)

;; automatically follow symlinks
(setq vc-follow-symlinks t)

;; mercurial push 
(defun mercurial-push-cwd () 
  (interactive)
  (generate-new-buffer "*hg push*")
  (switch-to-buffer "*hg push*")
  (vc-do-command "*hg push*" `async' "hg" nil "push"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; other minor modes

;; recent files
(recentf-mode 1)

;; cua mode
(cua-mode 1)

;; enable column number on all major modes
(column-number-mode 1)

;; can replace the region just by typing text, and delete it just by
;; typing the Backspace key (DEL)
(delete-selection-mode 1)

;; other useful minor modes
(show-paren-mode 1)
(dynamic-completion-mode 1)
(size-indication-mode 1)
(blink-cursor-mode 1)

;; file templates
(require 'autoinsert)

(setq auto-insert-query nil)
(setq auto-insert-alist
      '(((shell-script-mode . "Shell Program")
	 nil
	 "#!/bin/bash\n")
	((cperl-mode . "Perl Program")
	 nil
	 "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\n")))

(auto-insert-mode 1)

;; enabling active region highlighting
(setq transient-mark-mode t)

;; disable over-write mode
(put 'overwrite-mode 'disabled t)

;; ibuffer
(require 'ibuffer)

;; indent
(defun back-to-indentation-or-beginning ()
  "switches the point to before the first non-space
    character, or if the point is already there it goes to the
    beginning of the line"
  (interactive)
  (if (= (point) (save-excursion (back-to-indentation) (point)))
      (beginning-of-line)
    (back-to-indentation)))

;; clone line as on netbeans
(defun clone-line()
  "Copy the current line after itself."
  (interactive)
  (beginning-of-line)
  (kill-line)
  (yank)
  (newline)
  (yank)
  (beginning-of-line))

(defun clone-region ()
  "Copy the current region after itself."
  (interactive)
  (let ((start (region-beginning))) 
    (kill-ring-save (region-beginning) (region-end))
    (yank)
    (goto-char start)))

(defun clone-region-or-line()
  "Clone the current region, or if none active, the current line."
  (interactive)
  (if (region-active-p)
      (clone-region)
    (clone-line)))


;; other special commands
(defun insert-shell-command-output (command)
  "Prompt for a command the insert it's output at point"
  (interactive "sInsert command output: ")
  (insert (shell-command-to-string command)))

;; source:
;;   http://www.emacswiki.org/cgi-bin/wiki/PopupRuler
(defun column-ruler (width)
  "Display temp ruler at point."
  (interactive `(,(+ (window-hscroll)(window-width))))
  (momentary-string-display
   (let* ((iterations (/ (1- width) 10))
	  (result1 "|...|....|")
	  (result2 "1   5   10")
	  (inc1 "....|....|")
	  (inc2 "        %d0")
	  (i 1))
     (while  (<= i iterations)
       (setq i (1+ i))
       (setq result1 (concat result1 inc1))
       (setq result2 (concat result2 (substring (format inc2 i) -10))))
     (concat (substring result2 0 width) "\n"
	     (substring result1 0 width) "\n"))
   (line-beginning-position)
   nil "[space] Clears ruler"))

(defun increment-number-at-point ()
  "Increment the number at point"
  (interactive)
  (skip-chars-backward "0123456789")
  (or (looking-at "[0123456789]+")
      (error "No number at point"))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))

(defun decrement-number-at-point ()
  "Decrement number at point"
  (interactive)
  (skip-chars-backward "0123456789")
  (or (looking-at "[0123456789]+")
      (error "No number at point"))
  (replace-match (number-to-string (1- (string-to-number (match-string 0))))))

;; insert the date, the time, and the date and time at point. Insert
;; the date 31 days hence at point, eventually...
(defvar insert-time-format "%T"
  "*Format for \\[insert-time] (c.f. 'format-time-string' for how to format).")

(defvar insert-date-format "%Y%m%d"
  "*Format for \\[insert-date] (c.f. 'format-time-string' for how to
 format).")

(defun insert-time ()
  "Insert the current time according to the variable \"insert-time-format\"."
  (interactive "*")
  (insert (format-time-string insert-time-format
			      (current-time))))
(defun insert-date ()
  "Insert the current date according to the variable \"insert-date-format\"."
  (interactive "*")
  (insert (format-time-string insert-date-format
			      (current-time))))

(defun insert-time-and-date ()
  "Insert the current date according to the variable
 \"insert-date-format\", then a space, then the current time according
 to the variable \"insert-time-format\"."
  (interactive "*")
  (progn
    (insert-date)
    (insert " ")
    (insert-time)))

(defun insert-name-and-email()
  (interactive)
  "Insert my signature at point."
  (insert (concat user-full-name " <" user-mail-address ">")))

(setq gpl-header "This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
USA.
")

(defun insert-gpl-header ()
  "Insert standard GPL header at point."
  (interactive)
  (let ((mark (point)))
    (insert gpl-header)
    (comment-region mark (+ mark (length gpl-header)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ManHtml
;; source:
;;   http://www.emacswiki.org/cgi-bin/wiki/ManHtml
(setq man-local-alist
      '(
	;; Clojure
	("clojure" "http://richhickey.github.com/clojure/clojure.core-api.html")

	;; Java
	("java5" "http://java.sun.com/j2se/1.5.0/docs/api/") 

	;; GNU Emacs
	("emacswiki" "http://www.emacswiki.org/cgi-bin/wiki/SiteMap")))

(defun man-local (what)
  "Browse HTML documentation according to man-local-alist"
  (interactive
   (let ((page (completing-read (format "What? (default %s): "
					(thing-at-point 'word))
				man-local-alist nil t)))
     (list page)))
  (browse-url (cadr (assoc what man-local-alist))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Handy macros

(setq local-vars "Local Variables:\n\nEnd:\n") 

(defun insert-local-variables ()
  "Insert local variables section at point"
  (interactive)
  (let ((mark (point)))
    (insert local-vars)
    (comment-region mark (+ mark (length local-vars)))))

(defun count-words-buffer ()
  "Print the number of words in the buffer in the minibuffer"
  (interactive)
  (save-excursion
    (let ((count 0))
      (goto-char (point-min))
      (while (< (point) (point-max))
	(forward-word)
	(setq count (1+ count)))
      (message "Buffer contains %d words." count))))

(defun ascii-table ()
  "Display basic ASCII table (0 thru 127)"
  (interactive)
  (switch-to-buffer "*ASCII*")
  (erase-buffer)
  (save-excursion 
    (let ((i -1))
      (insert "ASCII characters 0 thru 127.\n\n")
      (insert " Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char\n")
      (while (< i 31)
	(insert 
	 (format "%4x %4d %4s | %4x %4d %4s | %4x %4d %4s | %4x %4d %4s\n"
		 (setq i (+ 1  i)) i (single-key-description i)
		 (setq i (+ 32 i)) i (single-key-description i)
		 (setq i (+ 32 i)) i (single-key-description i)
		 (setq i (+ 32 i)) i (single-key-description i)))
	(setq i (- i 96)))))
  (toggle-read-only 1))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; smart completion 
;;
;; a modified version from http://www.emacswiki.org/emacs/TabCompletion
;; used with:
;;  - TeX-complete-symbol
;;  - slime-complete-symbol 
;;  - lisp-complete-symbol
;;
;; NB: this is NOT smart-tab.el, this is just a useful hack
;; (available at http://github.com/haxney/smart-tab/blob/master/smart-tab.el)

(defun smart-tab (completion-hook)
  "If mark is active, indents region. Else if point is at the end
   of a symbol, expands it using the `completion-hook'. Else
   indents the current line."
  (interactive)
  (if mark-active
      (indent-region (region-beginning)
		     (region-end))
      (if (looking-at "\\>")
	  (funcall completion-hook)
	(indent-for-tab-command))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; emacs-lisp

;; bytecompile dotemacs 
(require 'bytecomp)

(defun compile-dotemacs ()
  "Compile the dotemacs file."
  (interactive)
  (if (string= (buffer-file-name) 
	       (expand-file-name (concat default-directory "dotemacs-ubuntu")))
      (byte-compile-file (buffer-file-name))))

;; autocompile dotemacs at save
(add-hook 'after-save-hook 'compile-dotemacs)

;; use emacs-lisp-mode for "dotemacs-ubuntu"
(add-to-list 'auto-mode-alist '("dotemacs-ubuntu" . emacs-lisp-mode))

;; keybindings
(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    (defun complete-elisp () 
	      (interactive)
	      (smart-tab 'lisp-complete-symbol))
	    
	    ;; rebind lisp-complete-symbol to TAB
	    (local-set-key (kbd "<tab>") 'complete-elisp)))

;; templates
(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    ;; activating paredit-mode (installed via elpa)
	    ;;(paredit-mode 1)

	    ;; add-hook
	    (define-skeleton elisp-skeleton-add-hook
	      "Insert an add-hook block" nil
	      > "(add-hook '" _ "\n"
	      > "(lambda ()\n"
	      > "))")

	    ;; defun
	    (define-skeleton elisp-skeleton-defun
	      "Insert a defun" nil
	      > "(defun " _ " ()\n"
	      > "  \"\"\n"
	      > ")")

	    ;; setq
	    (define-skeleton elisp-skeleton-setq
	      "Insert setq " nil
	      > "(setq " _ ")\n")

	    ;; new section
	    (define-skeleton elisp-skeleton-new-section
	      "Insert a new section (just a comment :-) " nil
	      > (concat (string-repeat ";" 80) "\n;; ") _ "")

	    ;; mapping skeletons
	    (local-set-key "\C-cih" 'elisp-skeleton-add-hook)
	    (local-set-key "\C-cid" 'elisp-skeleton-defun)
	    (local-set-key "\C-cis" 'elisp-skeleton-setq)
	    (local-set-key "\C-cin" 'elisp-skeleton-new-section)

	    ;; end
	    (setq skeleton-end-hook nil)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; clojure-mode 
;;
;; http://wiki.unto.net/setting-up-clojure-and-slime
;; http://riddell.us/ClojureWithEmacsSlimeSwankOnUbuntu.html

(add-to-list 'load-path "~/apps/clojure-mode")
(add-to-list 'load-path "~/apps/swank-clojure")
(add-to-list 'load-path "~/apps/slime")

(setq swank-clojure-jar-path "~/apps/clojure/1.1/clojure.jar")

(require 'clojure-mode)
(require 'swank-clojure)
(require 'slime)

(add-hook 'clojure-mode-hook
	  (lambda ()
	    ;; custom keybindings
	    (defun complete-clojure () 
	      (interactive)
	      (smart-tab 'slime-complete-symbol))

	    (local-set-key (kbd "<tab>") 'complete-clojure)))

(eval-after-load "slime" (slime-setup '(slime-repl)))
(slime-setup)

; slime-repl customisation
(add-hook 'slime-repl-hook
 (lambda ()
   (slime-repl-eval-string "(set! *print-length* 10)")
   (slime-repl-eval-string "(use 'clojure.contrib.repl-utils)")))

;; slime (mapped to F3)
(defun force-swith-to-slime() 
  (interactive)
  (if (slime-connected-p)
    (slime-switch-to-output-buffer)
    (slime)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; c-mode 
;;

;; must have minor modes
(add-hook 'c-mode-common-hook
	  (lambda ()
	    (c-subword-mode 1)
	    (c-toggle-hungry-state 1)
	    (c-toggle-auto-newline 1)))

;; to automatically fill comments but not code
(add-hook 'c-mode-common-hook
	  (lambda ()
	    (auto-fill-mode 1)
	    (set (make-local-variable 'fill-nobreak-predicate)
		 (lambda ()
		   (not (eq (get-text-property (point) 'face)
			    'font-lock-comment-face))))))

;; common skeletons
(add-hook 'c-mode-common-hook
	  (lambda ()
	    ;; do-while
	    (define-skeleton c-common-skeleton-do
	      "Insert a do-while block" nil
	      > "do {"\n
	      _ \n
	      -4"} while ();")

	    ;; while
	    (define-skeleton c-common-skeleton-while
	      "Insert a while block" nil
	      >"while (" _ ") {"\n
	      \n
	      -4"}")

	    ;; for
	    (define-skeleton c-common-skeleton-for
	      "Insert a for block" nil
	      > "for (" _ ";;) {"\n
	      \n
	      -4"}")

	    ;; switch
	    (define-skeleton c-common-skeleton-switch
	      "Insert a switch block" nil
	      > "switch (" _ ") {"\n
	      \n
	      "default:"\n
	      -4"}")

	    ;; if
	    (define-skeleton c-common-skeleton-if
	      "Insert an if block" nil
	      > "if (" _ ") {"\n
	      \n
	      -4"}")

	    ;; else
	    (define-skeleton c-common-skeleton-else
	      "Insert an else block" nil
	      > "else {"\n
	      _ \n
	      -4"}")

	    ;; else if
	    (define-skeleton c-common-skeleton-else-if
	      "Insert an else-if block" nil
	      > "else if(" _ ") {"\n
	      \n
	      -4"}")

	    ;; mapping skeletons
	    (local-set-key "\C-cid" 'c-common-skeleton-do)
	    (local-set-key "\C-ciw" 'c-common-skeleton-while)
	    (local-set-key "\C-cif" 'c-common-skeleton-for)
	    (local-set-key "\C-cis" 'c-common-skeleton-switch)
	    (local-set-key "\C-cii" 'c-common-skeleton-if)
	    (local-set-key "\C-cie" 'c-common-skeleton-else)
	    (local-set-key "\C-cil" 'c-common-skeleton-else-if)

	    ;; end
	    (setq skeleton-end-hook nil)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; c-mode

;; style and other generic stuff
(add-hook 'c-mode-hook
	  (lambda ()
	    ;; My C style
	    (defconst my-c-style
	      '(
		(c-tab-always-indent . t)
		(c-tab-width . 2)
		(c-indent-tabs-mode . 1)
		(c-basic-offset . 2)
		(comment-multi-line t)
		)
	      "My C Programming Style")

	    ;; add my personal style and set it for the current buffer
	    (c-add-style "dfa" my-c-style t)

	    ;; setting # behavior
	    (setq c-electric-pound-behavior '(alignleft))))

;; FlyMake
(add-hook 'c-mode-hook
	  (lambda ()
	    (load-library "flymake")

	    ;; loads flymake when possible
	    (add-hook 'find-file-hooks 'flymake-find-file-hook)

	    ;; disable GUI warnings
	    (setq flymake-gui-warnings-enabled nil)

	    ;; speedup
	    (setq flymake-start-syntax-check-on-newline nil)

	    ;; a somewhat handy function
	    (defun my-flymake-show-next-error()
	      (interactive)
	      (flymake-goto-next-error)
	      (flymake-display-err-menu-for-current-line))

	    ;; bind it to C-c C-v
	    (local-set-key "\C-c\C-v" 'my-flymake-show-next-error)))

;; move whole functions around...
(defun my-move-function-up ()
  "Swap the current (whole) function with the function above."
  (interactive)
  (c-mark-function)
  (kill-region (region-beginning) (region-end))
  (c-beginning-of-defun 1)
  (yank))

(defun my-move-function-down ()
  "Swap the current (whole) function with the function below."
  (interactive)
  (c-mark-function)
  (kill-region (region-beginning) (region-end))
  (c-beginning-of-defun -1)
  (yank))

(add-hook 'c-mode-hook
	  (lambda ()
	    (local-set-key "\C-cd" 'my-move-function-up)
	    (local-set-key "\C-cf" 'my-move-function-down)))

;; c preprocessor
(setq c-macro-shrink-window-flag t)
(setq c-macro-prompt-flag nil)
(setq c-macro-preprocessor "cpp -C")

;; .l, .gperf and .tc uses c-mode
(add-to-list 'auto-mode-alist '("\\.l$" . c-mode))
(add-to-list 'auto-mode-alist '("\\.gperf$" . c-mode))
(add-to-list 'auto-mode-alist '("\\.tc$" . c-mode))

(defun secure-string-match(regexp string)
  "prevent string-match to receive a nil as string" ;; FIXME
  (if (not (eq string nil))
      (string-match regexp buffer-file-name)))

;; disable auto-state on .y, .l, .tc or .gperf files
(add-hook 'c-mode-hook
	  (lambda ()
	    (mapc (lambda (r)
		    (when (secure-string-match r buffer-file-name)
		      (c-toggle-auto-newline -1)))
		  '("\\.l$" "\\.y$" "\\.tc$" "\\.gperf"))))

;; disable flymake-mode for .h files
(add-hook 'c-mode-hook
	  (lambda ()
	    (mapc (lambda (r)
		    (when (secure-string-match r buffer-file-name)
		      (flymake-mode -1)))
		  '("\\.h$"))))

;; highlight %option for .l, .y and .tc files
(add-hook 'c-mode-hook
	  (lambda ()
	    (mapc (lambda (r)
		    (when (secure-string-match r buffer-file-name)
		      (font-lock-add-keywords nil
	      '(("%\\<\\(option\\)\\>" 1 font-lock-warning-face prepend)))))
		  '("\\.l$" "\\.y$" "\\.tc$"))))

;; highlight for treecc files
(add-hook 'c-mode-hook
	  (lambda ()
	    (mapc (lambda (r)
		    (when (secure-string-match r buffer-file-name)
		      (font-lock-add-keywords nil
					      '(("%\\<\\(abstract\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(node\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(virtual\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(inline\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(split\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(include\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(operation\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(nocreate\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(decls\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(both\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(end\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(readonly\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(header\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(output\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(outdir\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(common\\)\\>" 1 font-lock-keyword-face prepend)))))
		  '("\\.tc$"))))

;; highlight for bison files
(add-hook 'c-mode-hook
	  (lambda () 
	    (mapc (lambda (r)
		    (when (secure-string-match r buffer-file-name)
		      (font-lock-add-keywords nil
					      '(("%\\<\\(prec\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(token\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(left\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(right\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(nonassoc\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(type\\)\\>" 1 font-lock-keyword-face prepend)
						("\\<\\(error\\)\\>" 1 font-lock-warning-face prepend)))))
		  '("\\.y$"))))

;; C specific skeletons
(add-hook 'c-mode-hook
	  (lambda ()
	    ;; main
	    (define-skeleton c-skeleton-main
	      "Insert a main()" nil
	      > "int main(int argc, char \**argv)"\n
	      -4"{"\n
	      _ \n
	      -4"}")

	    ;; mapping skeletons
	    (local-set-key "\C-cim" 'c-skeleton-main)

	    ;; end
	    (setq skeleton-end-hook nil)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; text-mode

;; enabling auto-fill-mode with text-mode

(add-hook 'text-mode-hook
	  '(lambda ()
	     (auto-fill-mode 1)))

;; enter text-mode when opening a file named 'README', 'INSTALL' and so on
(add-to-list 'auto-mode-alist '("README" . text-mode))
(add-to-list 'auto-mode-alist '("INSTALL" . text-mode))
(add-to-list 'auto-mode-alist '("NEWS" . text-mode))
(add-to-list 'auto-mode-alist '("TODO" . text-mode))
(add-to-list 'auto-mode-alist '("AUTHORS" . text-mode))
(add-to-list 'auto-mode-alist '("THANKS" . text-mode))
(add-to-list 'auto-mode-alist '("COPYING" . text-mode))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LaTeX

(setq-default TeX-master nil) 
(setq TeX-parse-self t)
(setq TeX-auto-save t)

(add-hook 'LaTeX-mode-hook
	  (lambda ()
	    ;; italian accents
	    (define-skeleton latex-e-skeleton
	      "Insert \`{e} " nil
	      > "\\`{e}" _)
	    (define-skeleton latex-ee-skeleton
	      "Insert \'{e} " nil
	      > "\\'{e}" _)
	    (define-skeleton latex-i-skeleton
	      "Insert \`{i} " nil
	      > "\\`{i}" _)
	    (define-skeleton latex-o-skeleton
	      "Insert \`{o} " nil
	      > "\\`{o}" _)
	    (define-skeleton latex-u-skeleton
	      "Insert \`{u} " nil
	      > "\\`{u}" _)	    
	    (define-skeleton latex-a-skeleton
	      "Insert \`{a} " nil
	      > "\\`{a}" _)
	    
	    (local-set-key "\C-ce" 'latex-e-skeleton)
	    (local-set-key "\C-cE" 'latex-ee-skeleton)
	    (local-set-key "\C-ci" 'latex-i-skeleton)
	    (local-set-key "\C-co" 'latex-o-skeleton)
	    (local-set-key "\C-cu" 'latex-u-skeleton)
	    (local-set-key "\C-ca" 'latex-a-skeleton)
	    
	    ;; autocompletion with tab-or-indent
	    (defun complete-latex () 
	      (interactive)
	      (smart-tab 'TeX-complete-symbol))

	    (local-set-key (kbd "<tab>") 'complete-latex)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  X window stuff

(when window-system
  ;; display various non-editing buffers in their own frames
  (setq special-display-buffer-names
	(nconc '("*Backtrace*"
		 "*vc-change-log*"
		 "*VC-log*") 
	       special-display-buffer-names))

  ;; display those special buffer frames without a tool bar
  (setq special-display-frame-alist nil)

  ;; customizing frame look
  (add-to-list 'special-display-frame-alist '(tool-bar-lines . 0))
  (add-to-list 'special-display-frame-alist '(menu-bar-lines . 0))
  (add-to-list 'special-display-frame-alist '(height . 10))
  (add-to-list 'special-display-frame-alist '(width . 80))
  (add-to-list 'special-display-frame-alist '(unsplittable . t))
  (add-to-list 'default-frame-alist '(cursor-color . "white"))
  (add-to-list 'default-frame-alist '(foreground-color . "white"))
  (add-to-list 'default-frame-alist '(background-color . "MidnightBlue"))
  (add-to-list 'default-frame-alist '(font . "Monospace-10"))

  ;; disabling the toolbar and the scrollbar
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; enabling my wheeled trackball
  (mouse-wheel-mode 1)

  ;; setting a decent wheel behavior
  (setq mouse-progressive-speed nil)
  (setq mouse-wheel-progressive-speed nil)
  (setq scroll-step 1)
  (setq scroll-conservatively 1))

;; open recent files at init
(recentf-open-files)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; global key bindings

;; *mental sanity mode*: use C-f for search, and other "Windows" keystrokes..
(global-set-key "\C-s" 'save-buffer)
(global-set-key "\C-f" 'isearch-forward-regexp)
(global-unset-key "\C-x\C-l")
(global-set-key "\C-x\C-l" 'recenter)
(global-unset-key "\C-l")
(global-set-key "\C-l" 'goto-line)
(global-set-key (kbd "<home>") 'back-to-indentation-or-beginning)

(global-set-key "\C-b" 'ibuffer)

(global-set-key "\C-xvp" 'mercurial-push-cwd)

(global-set-key "\C-c\C-c" 'mode-compile)
(global-set-key "\C-c\C-k" 'mode-compile-kill)

(global-set-key "\M-`" 'quick-calc)
(global-set-key "\M-1" 'woman)
(global-set-key "\M-2" 'shell-command)
(global-set-key "\M-@" 'insert-shell-command-output)
(global-set-key "\M-3" 'indent-region)
(global-set-key "\M-4" 'locate)
(global-set-key "\M-5" 'highlight-regexp)
(global-set-key "\M-6" 'unhighlight-regexp)
(global-set-key "\M-7" 'column-ruler)
(global-set-key "\M-9" 'decrement-number-at-point)
(global-set-key "\M-0" 'increment-number-at-point)

(global-set-key [f1] 'info)
(global-set-key [f2] 'eshell)
(global-set-key [f3] 'force-swith-to-slime)
(global-set-key [f4] 'erc-maybe)
(global-set-key [f5] 'insert-date)
(global-set-key [f6] 'insert-time)
(global-set-key [f7] 'insert-time-and-date)
(global-set-key [f8] 'insert-name-and-email)
(global-set-key [f9] 'insert-gpl-header)
(global-set-key [f10] 'man-local)
(global-set-key [f12] 'recentf-open-files)

;; netbeans-like clone line/region
(global-set-key [C-S-down] 'clone-region-or-line)
(global-set-key [C-S-up] 'clone-region-or-line)



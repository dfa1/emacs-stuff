;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; My .emacs for windows
;;
;; Author    : Davide Angelocola <davide.angelocola@gmail.com>
;; Time-stamp: <2010-04-28 21:47:19 dfa>

;; forked from dotemacs (for Gentoo Linux), removed some stuff such as:
;;   - C/Java mode
;;   - perl mode
;;   - m4/autoconf mode
;;   - muse 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Variables

;; my home
(setq default-directory "C:/Users/dfa/")

;; inhibit startup message
(setq inhibit-startup-message t)

;; setting username, email address and other stuff
(setq user-full-name "Davide Angelocola")
(setq user-mail-address "davide.angelocola@gmail.com")
(setq current-language-environment "English")

;; see what I'm typing *immediately*
(setq echo-keystrokes 0.01)

;; enabling case-fold-search
(setq case-fold-search t)

;; change backup behavior to save in a directory, not in a miscellany
;; of files all over the place
(setq backup-by-copying t
      backup-directory-alist '(("." . "~/.saves"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control nil)

;; _always_ require final newline
(setq require-final-newline t)

;; set dynamic abbreviations to case rude
(setq dabbrev-case-fold-search nil)
(setq save-abbrevs nil)

;; cursor follow compilation's output
(setq compilation-scroll-output t)

;; undo limit
(setq undo-limit 40000)

;; make all "yes or no" prompts show "y or n" instead
(fset 'yes-or-no-p 'y-or-n-p)

;; disabling narrowing
(put 'narrow-to-region 'disabled nil)

;; allow a command to erase an entire buffer
(put 'erase-buffer 'disabled nil)

;; the following reduces the amount of warning signals but does not
;; turn them off in general
(setq ring-bell-function
      (lambda ()
	(unless (memq this-command
		      '(isearch-abort
			abort-recursive-edit
			exit-minibuffer
			keyboard-quit))
	  (ding))))

;; date and time
(setq calendar-week-start-day 1)
(setq european-calendar-style 't)

;; the bullet indicates the start of a new paragraph
(setq paragraph-start "\\*\\|$\\|-"
      paragraph-separate "$")

;; sentences
(setq sentence-end "[.?!][]\"')}]*\\($\\|[ \t]\\)[ \t\n]*"
      sentence-end-double-space nil)

;; completion ignores filenames ending in any string in this list
(setq completion-ignored-extensions
      '(".o" ".lo" ".so" ".elc" ".class"))

;; this is also of interest, it auto-magically does a "chmod u+x"
;; when you save a script file (starting with "#!")
(add-hook 'after-save-hook
	  'executable-make-buffer-file-executable-if-script-p)

;; update timestamp
(add-hook 'before-save-hook 
	  'time-stamp)

;; don't echo passwords when communicating with interactive programs
(add-hook 'comint-output-filter-functions 
	  'comint-watch-for-password-prompt)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Minor modes

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FlySpell

;; using GNU aspell...
(setq ispell-program-name 
      "C:\\Program Files (x86)\\Aspell\\bin\\aspell.exe")

;; ...and try to speedup it
(setq ispell-extra-args 
      '("--sug-mode=ultra"))

;; sort corrections
(setq flyspell-sort-corrections 
      nil)

;; enable flyspell only for text-mode
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda ()
		   (flyspell-mode 1))))

;; enable flyspell-prog-mode for some modes
(dolist (hook '(html-mode-hook
		css-mode-hook
		emacs-lisp-mode-hook))
  (add-hook hook (lambda ()
		   (flyspell-prog-mode))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Font lock mode

;; enable font locking globally
(global-font-lock-mode t)

;; highlight FIXME, TODO and XXX as warning in some major modes
(dolist (mode '(
		latex-mode-hook
		LaTeX-mode-hook
		html-mode-hook
		css-mode-hook
		emacs-lisp-mode))
  (font-lock-add-keywords mode 
			  '(("\\(XXX\\|FIXME\\|TODO\\)" 
			     1 font-lock-warning-face prepend))))


;; other customizations
(setq font-lock-maximum-decoration t
      font-lock-maximum-size nil)

(setq font-lock-support-mode 'jit-lock-mode
      fast-lock-cache-directories '("~/.emacs-flc"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Outline

(define-prefix-command 'cm-map nil "Outline-")

(define-key cm-map "q" 'hide-sublevels)
(define-key cm-map "t" 'hide-body)
(define-key cm-map "o" 'hide-other)
(define-key cm-map "c" 'hide-entry)
(define-key cm-map "l" 'hide-leaves)
(define-key cm-map "d" 'hide-subtree)

(define-key cm-map "a" 'show-all)
(define-key cm-map "e" 'show-entry)
(define-key cm-map "i" 'show-children)
(define-key cm-map "k" 'show-branches)
(define-key cm-map "s" 'show-subtree)

(define-key cm-map "u" 'outline-up-heading)
(define-key cm-map "n" 'outline-next-visible-heading)
(define-key cm-map "p" 'outline-previous-visible-heading)
(define-key cm-map "f" 'outline-forward-same-level)
(define-key cm-map "b" 'outline-backward-same-level)

(global-set-key "\C-o" cm-map)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; VC 

;; prompt for initial comment when a file is registered
(setq vc-initial-comment t)

;; automatically follow symlinks
(setq vc-follow-symlinks t)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; other minor modes

;; recent files
(recentf-mode 1)

;; cua mode
(cua-mode 1)

;; enable column number on all major modes
(column-number-mode 1)

;; can replace the region just by typing text, and delete it just by
;; typing the Backspace key (DEL)
(delete-selection-mode 1)

;; other useful minor modes
(show-paren-mode 1)
(dynamic-completion-mode 1)
(size-indication-mode 1)
(blink-cursor-mode 1)

;; file templates
(require 'autoinsert)

(setq auto-insert-query nil)
(setq auto-insert-alist
      '(((shell-script-mode . "Shell Program")
	 nil
	 "#!/bin/bash\n")
	((cperl-mode . "Perl Program")
	 nil
	 "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\n")
	((muse-mode . "Muse page")
	 nil
	 "#title ")))

(auto-insert-mode 1)

;; enabling active region highlighting
(setq transient-mark-mode t)

;; disable over-write mode
(put 'overwrite-mode 'disabled t)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; My Keybindings

;; remapping some commands
(global-unset-key "\C-x\C-l")
(global-set-key "\C-x\C-l" 'recenter)
(global-unset-key "\C-l")
(global-set-key "\C-l" 'goto-line)

;; ibuffer
(require 'ibuffer)
(global-set-key "\C-x\C-b" 'ibuffer)

(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

(global-set-key "\C-xq" 'kill-other-buffers)

(defun switch-to-previous-buffer ()
  "Switch to previous buffer"
  (interactive)
  (switch-to-buffer (other-buffer)))
(global-set-key "\C-b" 'switch-to-previous-buffer)

(defun back-to-indentation-or-beginning ()
  "switches the point to before the first non-space
    character, or if the point is already there it goes to the
    beginning of the line"
  (interactive)
  (if (= (point) (save-excursion (back-to-indentation) (point)))
      (beginning-of-line)
    (back-to-indentation)))

(global-set-key (kbd "<home>") 'back-to-indentation-or-beginning)

(defun clone-line()
  "Copy this line after itself."
  (interactive)
  (beginning-of-line)
  (kill-line)
  (yank)
  (newline)
  (yank)
  (beginning-of-line))

(global-set-key "\C-cc" 'clone-line)

(defun clone-region ()
  "Copy this region after itself."
  (interactive)
  (let ((start (dot-marker))) ;; FIXME: dot-marker is missing
    (kill-ring-save (region-beginning) (region-end))
    (yank)
    (goto-char start)))

(global-set-key "\C-cC" 'clone-region)

(defun insert-shell-command-output (command)
  "Prompt for a command the insert it's output at point"
  (interactive "sInsert command output: ")
  (insert (shell-command-to-string command)))

;; handy keystrokes
(global-set-key "\M-`" 'quick-calc)
(global-set-key "\M-1" 'woman)
(global-set-key "\M-2" 'shell-command)
(global-set-key "\M-@" 'insert-shell-command-output)
(global-set-key "\M-3" 'indent-region)
(global-set-key "\M-4" 'locate)
(global-set-key "\M-5" 'highlight-regexp)
(global-set-key "\M-6" 'unhighlight-regexp)

;; source:
;;   http://www.emacswiki.org/cgi-bin/wiki/PopupRuler
(defun column-ruler (width)
  "Display temp ruler at point."
  (interactive `(,(+ (window-hscroll)(window-width))))
  (momentary-string-display
   (let* ((iterations (/ (1- width) 10))
	  (result1 "|...|....|")
	  (result2 "1   5   10")
	  (inc1 "....|....|")
	  (inc2 "        %d0")
	  (i 1))
     (while  (<= i iterations)
       (setq i (1+ i))
       (setq result1 (concat result1 inc1))
       (setq result2 (concat result2 (substring (format inc2 i) -10))))
     (concat (substring result2 0 width) "\n"
	     (substring result1 0 width) "\n"))
   (line-beginning-position)
   nil "[space] Clears ruler"))

(global-set-key "\M-7" 'column-ruler)

(defun increment-number-at-point ()
  "Increment the number at point"
  (interactive)
  (skip-chars-backward "0123456789")
  (or (looking-at "[0123456789]+")
      (error "No number at point"))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))

(global-set-key "\M-0" 'increment-number-at-point)

(defun decrement-number-at-point ()
  "Decrement number at point"
  (interactive)
  (skip-chars-backward "0123456789")
  (or (looking-at "[0123456789]+")
      (error "No number at point"))
  (replace-match (number-to-string (1- (string-to-number (match-string 0))))))

(global-set-key "\M-9" 'decrement-number-at-point)

;; mapping function keys
(global-set-key [f1] 'info)
(global-set-key [f2] 'eshell)

;; insert the date, the time, and the date and time at point. Insert
;; the date 31 days hence at point, eventually...
(defvar insert-time-format "%T"
  "*Format for \\[insert-time] (c.f. 'format-time-string' for how to format).")

(defvar insert-date-format "%Y%m%d"
  "*Format for \\[insert-date] (c.f. 'format-time-string' for how to
 format).")

(defun insert-time ()
  "Insert the current time according to the variable \"insert-time-format\"."
  (interactive "*")
  (insert (format-time-string insert-time-format
			      (current-time))))
(defun insert-date ()
  "Insert the current date according to the variable \"insert-date-format\"."
  (interactive "*")
  (insert (format-time-string insert-date-format
			      (current-time))))

(defun insert-time-and-date ()
  "Insert the current date according to the variable
 \"insert-date-format\", then a space, then the current time according
 to the variable \"insert-time-format\"."
  (interactive "*")
  (progn
    (insert-date)
    (insert " ")
    (insert-time)))

(global-set-key [f5] 'insert-date)
(global-set-key [f6] 'insert-time)
(global-set-key [f7] 'insert-time-and-date)

(defun insert-name-and-email()
  (interactive)
  "Insert my signature at point."
  (insert (concat user-full-name " <" user-mail-address ">")))

(global-set-key [f8] 'insert-name-and-email)

(setq gpl-header "This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
USA.
")

(defun insert-gpl-header ()
  "Insert standard GPL header at point."
  (interactive)
  (let ((mark (point)))
    (insert gpl-header)
    (comment-region mark (+ mark (length gpl-header)))))

(global-set-key [f9] 'insert-gpl-header)

  
;; ManHtml
;; source:
;;   http://www.emacswiki.org/cgi-bin/wiki/ManHtml
(setq man-local-alist
      '(
	;; Java
	("java5" "http://java.sun.com/j2se/1.5.0/docs/api/") 

	;; GNU Emacs
	("emacswiki" "http://www.emacswiki.org/cgi-bin/wiki/SiteMap")))

(defun man-local (what)
  "Browse HTML documentation according to man-local-alist"
  (interactive
   (let ((page (completing-read (format "What? (default %s): "
					(thing-at-point 'word))
				man-local-alist nil t)))
     (list page)))
  (browse-url (cadr (assoc what man-local-alist))))

(global-set-key [f10] 'man-local)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Handy macros

(setq local-vars "Local Variables:\n\nEnd:\n") ;; TODO: better with skeletons

(defun insert-local-variables ()
  "Insert local variables section at point"
  (interactive)
  (let ((mark (point)))
    (insert local-vars)
    (comment-region mark (+ mark (length local-vars)))))

(defun count-words-buffer ()
  "Print the number of words in the buffer in the minibuffer"
  (interactive)
  (save-excursion
    (let ((count 0))
      (goto-char (point-min))
      (while (< (point) (point-max))
	(forward-word)
	(setq count (1+ count)))
      (message "Buffer contains %d words." count))))

(defun ascii-table ()
  "Display basic ASCII table (0 thru 127)"
  (interactive)
  (switch-to-buffer "*ASCII*")
  (erase-buffer)
  (save-excursion 
    (let ((i -1))
      (insert "ASCII characters 0 thru 127.\n\n")
      (insert " Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char\n")
      (while (< i 31)
	(insert 
	 (format "%4x %4d %4s | %4x %4d %4s | %4x %4d %4s | %4x %4d %4s\n"
			(setq i (+ 1  i)) i (single-key-description i)
			(setq i (+ 32 i)) i (single-key-description i)
			(setq i (+ 32 i)) i (single-key-description i)
			(setq i (+ 32 i)) i (single-key-description i)))
	(setq i (- i 96)))))
  (toggle-read-only 1))

;; helpers (non interactive)
(defmacro join (join-char &rest others)
  "join as in perl"
  `(mapconcat 'identity ',others ,join-char))

(defun string-repeat (str times)
  "As the x operator in perl"
  (let ((res ""))
    (let ((i 0))
      (while (< i times)
	(setq res (concat str res))
	(setq i (+ i 1)))) 
    res))

(defun secure-string-match(regexp string)
  "prevent string-match to receive a nil as string" ;; FIXME
  (if (not (eq string nil))
      (string-match regexp buffer-file-name)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mode-compile

(global-set-key "\C-c\C-c" 'mode-compile)
(global-set-key "\C-c\C-k" 'mode-compile-kill)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; emacs-lisp

;; enter emacs-lisp-mode when opening a file named 'dotemacs'
(require 'bytecomp)

(defun compile-dotemacs ()
  "Compile the dotemacs file"
  (interactive)
  (if (string= (buffer-file-name)
	       (expand-file-name (concat
				  default-directory "dotemacs")))
      (byte-compile-file (buffer-file-name))))

;; autocompile dotemacs at save
(add-hook 'after-save-hook 'compile-dotemacs)

;; use emacs-lisp-mode for dotemacs
(add-to-list 'auto-mode-alist '("dotemacs" . emacs-lisp-mode))

;; keybindings
(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    ;; rebind lisp-complete-symbol to M-]
	    (local-set-key "\M-]" 'lisp-complete-symbol)))

;; templates
(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    ;; activating paredit-mode (installed via elpa)
	    ;;(paredit-mode 1)

	    ;; add-hook
	    (define-skeleton elisp-skeleton-add-hook
	      "Insert an add-hook block" nil
	      > "(add-hook '" _ "\n"
	      > "(lambda ()\n"
	      > "))")

	    ;; defun
	    (define-skeleton elisp-skeleton-defun
	      "Insert a defun" nil
	      > "(defun " _ " ()\n"
	      > "  \"\"\n"
	      > ")")

	    ;; setq
	    (define-skeleton elisp-skeleton-setq
	      "Insert setq " nil
	      > "(setq " _ ")\n")

	    ;; new section
	    (define-skeleton elisp-skeleton-new-section
	      "Insert a new section (just a comment :-) " nil
	      > (concat (string-repeat ";" 80) "\n;; ") _ "")

	    ;; mapping skeletons
	    (local-set-key "\C-cih" 'elisp-skeleton-add-hook)
	    (local-set-key "\C-cid" 'elisp-skeleton-defun)
	    (local-set-key "\C-cis" 'elisp-skeleton-setq)
	    (local-set-key "\C-cin" 'elisp-skeleton-new-section)

	    ;; end
	    (setq skeleton-end-hook nil)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; clojure-mode

(add-hook 'clojure-mode-hook
 (lambda ()
   ;; load slime
   (load-library "slime")
   (slime 1)

   ;; custom keybindings
   (local-unset-key (kbd "<tab>"))
   (local-set-key (kbd "<tab>") slime-complete-symbol)))
   

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; html-mode

;; (add-hook 'html-mode-hook
;; 	  (lambda ()
;; 	    ;; setting indent-line-function
;; 	    (setq indent-line-function 'indent-relative)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; text-mode

;; enabling auto-fill-mode with text-mode

(add-hook 'text-mode-hook
	  '(lambda ()
	     (auto-fill-mode 1)))

;; enter text-mode when opening a file named 'README', 'INSTALL' and so on
(add-to-list 'auto-mode-alist '("README" . text-mode))
(add-to-list 'auto-mode-alist '("INSTALL" . text-mode))
(add-to-list 'auto-mode-alist '("NEWS" . text-mode))
(add-to-list 'auto-mode-alist '("TODO" . text-mode))
(add-to-list 'auto-mode-alist '("AUTHORS" . text-mode))
(add-to-list 'auto-mode-alist '("THANKS" . text-mode))
(add-to-list 'auto-mode-alist '("COPYING" . text-mode))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LaTeX

(setq-default TeX-master nil) 
(setq TeX-parse-self t)
(setq TeX-auto-save t)

(add-hook 'LaTeX-mode-hook
	  (lambda ()
	    ;; italian accents; I don't like the italian keyboard's layout
	    (define-skeleton latex-e-skeleton
	      "Insert \`{e} " nil
	      > "\\`{e}" _)
	    (define-skeleton latex-ee-skeleton
	      "Insert \'{e} " nil
	      > "\\'{e}" _)
	    (define-skeleton latex-i-skeleton
	      "Insert \`{i} " nil
	      > "\\`{i}" _)
	    (define-skeleton latex-o-skeleton
	      "Insert \`{o} " nil
	      > "\\`{o}" _)
	    (define-skeleton latex-u-skeleton
	      "Insert \`{u} " nil
	      > "\\`{u}" _)	    
	    (define-skeleton latex-a-skeleton
	      "Insert \`{a} " nil
	      > "\\`{a}" _)
	    
	    (local-set-key "\C-ce" 'latex-e-skeleton)
	    (local-set-key "\C-cE" 'latex-ee-skeleton)
	    (local-set-key "\C-ci" 'latex-i-skeleton)
	    (local-set-key "\C-co" 'latex-o-skeleton)
	    (local-set-key "\C-cu" 'latex-u-skeleton)
	    (local-set-key "\C-ca" 'latex-a-skeleton)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  X window stuff

(when window-system
  ;; display various non-editing buffers in their own frames
  (setq special-display-buffer-names
	(nconc '("*Backtrace*"
		 "*vc-change-log*"
		 "*VC-log*")
	       special-display-buffer-names))

  ;; display those special buffer frames without a tool bar
  (setq special-display-frame-alist nil)
  (add-to-list 'special-display-frame-alist '(tool-bar-lines . 0))
  (add-to-list 'special-display-frame-alist '(menu-bar-lines . 0))
  (add-to-list 'special-display-frame-alist '(height . 10))
  (add-to-list 'special-display-frame-alist '(width . 80))
  (add-to-list 'special-display-frame-alist '(unsplittable . t))

  ;; customizing frame look
  (add-to-list 'default-frame-alist '(cursor-color . "white"))
  (add-to-list 'default-frame-alist '(foreground-color . "white"))
  (add-to-list 'default-frame-alist '(background-color . "MidnightBlue"))

  ;; disabling the toolbar and the scrollbar
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; enabling my wheeled trackball
  (mouse-wheel-mode 1)

  ;; setting a decent wheel behavior
  (setq mouse-progressive-speed nil)
  (setq mouse-wheel-progressive-speed nil)
  (setq scroll-step 1)
  (setq scroll-conservatively 1))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; packages

;;; This was installed by package-install.el.
;;; This provides support for the package system and
;;; interfacing with ELPA, the package archive.
;;; Move this code earlier if you want to reference
;;; packages in your .emacs.
(when
    (load
     (expand-file-name "~/.emacs.d/elpa/package.el"))
  (package-initialize))


(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(safe-local-variable-values (quote ((TeX-master . tesi)))))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; My .emacs for Gentoo Linux 
;; NOTE: no longer maintained
;;
;; Author    : Davide Angelocola <davide.angelocola@gmail.com>
;; Time-stamp: <2010-05-02 14:42:00 dfa>


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Variables

;; provide a useful error trace if loading this .emacs fails
(setq debug-on-error t)

;; inhibit startup message
(setq inhibit-startup-message t)

;; setting username, email address and other stuff
(setq user-full-name "Davide Angelocola")
(setq user-mail-address "davide.angelocola@gmail.com")
(setq current-language-environment "English")

;; see what I'm typing *immediately*
(setq echo-keystrokes 0.01)

;; enabling case-fold-search
(setq case-fold-search t)

;; change backup behavior to save in a directory, not in a miscellany
;; of files all over the place
(setq backup-by-copying t
      backup-directory-alist '(("." . "~/.saves"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control nil)

;; _always_ require final newline
(setq require-final-newline t)

;; set dynamic abbreviations to case rude
(setq dabbrev-case-fold-search nil)
(setq save-abbrevs nil)

;; cursor follow compilation's output
(setq compilation-scroll-output t)

;; undo limit
(setq undo-limit 40000)

;; make all "yes or no" prompts show "y or n" instead
(fset 'yes-or-no-p 'y-or-n-p)

;; disabling narrowing
(put 'narrow-to-region 'disabled nil)

;; allow a command to erase an entire buffer
(put 'erase-buffer 'disabled nil)

;; the following reduces the amount of warning signals but does not
;; turn them off in general
(setq ring-bell-function
      (lambda ()
	(unless (memq this-command
		      '(isearch-abort
			abort-recursive-edit
			exit-minibuffer
			keyboard-quit))
	  (ding))))

;; date and time
(setq calendar-week-start-day 1)
(setq european-calendar-style 't)

;; the bullet indicates the start of a new paragraph
(setq paragraph-start "\\*\\|$\\|-"
      paragraph-separate "$")

;; sentences
(setq sentence-end "[.?!][]\"')}]*\\($\\|[ \t]\\)[ \t\n]*"
      sentence-end-double-space nil)

;; completion ignores filenames ending in any string in this list
(setq completion-ignored-extensions
      '(".o" ".lo" ".so" ".elc" ".class"))

;; browse
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "konqueror")

;; this is also of interest, it auto-magically does a "chmod u+x"
;; when you save a script file (starting with "#!")
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

;; update timestamp
(add-hook 'before-save-hook 'time-stamp)

;; don't echo passwords when communicating with interactive programs
(add-hook 'comint-output-filter-functions 'comint-watch-for-password-prompt)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Minor modes

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FlySpell

;; using GNU aspell...
(setq ispell-program-name "aspell")

;; ...and try to speedup it
(setq ispell-extra-args '("--sug-mode=ultra"))

;; sort corrections
(setq flyspell-sort-corrections nil)

;; enable flyspell only for text-mode
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda ()
		   (flyspell-mode 1))))

;; enable flyspell-prog-mode for all cc-modes, cperl and python mode
(dolist (hook '(c-mode-common-hook
		cperl-mode-hook
		html-mode-hook
		css-mode-hook
		emacs-lisp-mode-hook))
  (add-hook hook (lambda ()
		   (flyspell-prog-mode))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Font lock mode

;; enable font locking globally
(global-font-lock-mode t)

;; highlight FIXME, TODO and XXX as warning in some major modes
(dolist (mode '(c-mode
		java-mode
		cperl-mode
		html-mode-hook
		css-mode-hook
		emacs-lisp-mode))
  (font-lock-add-keywords mode 
			  '(("\\(XXX\\|FIXME\\|TODO\\)" 
			     1 font-lock-warning-face prepend))))


;; other customizations
(setq font-lock-maximum-decoration t
      font-lock-maximum-size nil)

(setq font-lock-support-mode 'jit-lock-mode
      fast-lock-cache-directories '("~/.emacs-flc"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Outline

(define-prefix-command 'cm-map nil "Outline-")

(define-key cm-map "q" 'hide-sublevels)
(define-key cm-map "t" 'hide-body)
(define-key cm-map "o" 'hide-other)
(define-key cm-map "c" 'hide-entry)
(define-key cm-map "l" 'hide-leaves)
(define-key cm-map "d" 'hide-subtree)

(define-key cm-map "a" 'show-all)
(define-key cm-map "e" 'show-entry)
(define-key cm-map "i" 'show-children)
(define-key cm-map "k" 'show-branches)
(define-key cm-map "s" 'show-subtree)

(define-key cm-map "u" 'outline-up-heading)
(define-key cm-map "n" 'outline-next-visible-heading)
(define-key cm-map "p" 'outline-previous-visible-heading)
(define-key cm-map "f" 'outline-forward-same-level)
(define-key cm-map "b" 'outline-backward-same-level)

(global-set-key "\C-o" cm-map)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; VC 

;; prompt for initial comment when a file is registered
(setq vc-initial-comment t)

;; automatically follow symlinks
(setq vc-follow-symlinks t)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; other minor modes

;; cua mode
(cua-mode 1)

;; enable column number on all major modes
(column-number-mode 1)

;; can replace the region just by typing text, and delete it just by
;; typing the Backspace key (DEL)
(delete-selection-mode 1)

;; always have minibuffer the appropriate size
;;(resize-minibuffer-mode 1)

;; other useful minor modes
(show-paren-mode 1)
(dynamic-completion-mode 1)
(size-indication-mode 1)
(blink-cursor-mode 1)

;; file templates
(require 'autoinsert)

(setq auto-insert-query nil)
(setq auto-insert-alist
      '(((shell-script-mode . "Shell Program")
	 nil
	 "#!/bin/bash\n")
	((cperl-mode . "Perl Program")
	 nil
	 "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\n")
	((muse-mode . "Muse page")
	 nil
	 "#title ")))

(auto-insert-mode 1)

;; enabling active region highlighting
(setq transient-mark-mode t)

;; disable over-write mode
(put 'overwrite-mode 'disabled t)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; My Keybindings

;; remapping some commands
(global-unset-key "\C-x\C-l")
(global-set-key "\C-x\C-l" 'recenter)
(global-unset-key "\C-l")
(global-set-key "\C-l" 'goto-line)

;; ibuffer
(require 'ibuffer)
(global-set-key "\C-x\C-b" 'ibuffer)

(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

(global-set-key "\C-xq" 'kill-other-buffers)

(defun switch-to-previous-buffer ()
  "Switch to previous buffer"
  (interactive)
  (switch-to-buffer (other-buffer)))
(global-set-key "\C-b" 'switch-to-previous-buffer)

(defun back-to-indentation-or-beginning ()
  "switches the point to before the first non-space
    character, or if the point is already there it goes to the
    beginning of the line"
  (interactive)
  (if (= (point) (save-excursion (back-to-indentation) (point)))
      (beginning-of-line)
    (back-to-indentation)))

(global-set-key (kbd "<home>") 'back-to-indentation-or-beginning)

(defun clone-line()
  "Copy this line after itself."
  (interactive)
  (beginning-of-line)
  (kill-line)
  (yank)
  (newline)
  (yank)
  (beginning-of-line))

(global-set-key "\C-cc" 'clone-line)

(defun clone-region ()
  "Copy this region after itself."
  (interactive)
  (let ((start (dot-marker))) ;; FIXME: dot-marker is missing
    (kill-ring-save (region-beginning) (region-end))
    (yank)
    (goto-char start)))

(global-set-key "\C-cC" 'clone-region)

(defun insert-shell-command-output (command)
  "Prompt for a command the insert it's output at point"
  (interactive "sInsert command output: ")
  (insert (shell-command-to-string command)))

;; handy keystrokes
(global-set-key "\M-`" 'quick-calc)
(global-set-key "\M-1" 'woman)
(global-set-key "\M-2" 'shell-command)
(global-set-key "\M-@" 'insert-shell-command-output)
(global-set-key "\M-3" 'indent-region)
(global-set-key "\M-4" 'locate)
(global-set-key "\M-5" 'highlight-regexp)
(global-set-key "\M-6" 'unhighlight-regexp)

;; source:
;;   http://www.emacswiki.org/cgi-bin/wiki/PopupRuler
(defun column-ruler (width)
  "Display temp ruler at point."
  (interactive `(,(+ (window-hscroll)(window-width))))
  (momentary-string-display
   (let* ((iterations (/ (1- width) 10))
	  (result1 "|...|....|")
	  (result2 "1   5   10")
	  (inc1 "....|....|")
	  (inc2 "        %d0")
	  (i 1))
     (while  (<= i iterations)
       (setq i (1+ i))
       (setq result1 (concat result1 inc1))
       (setq result2 (concat result2 (substring (format inc2 i) -10))))
     (concat (substring result2 0 width) "\n"
	     (substring result1 0 width) "\n"))
   (line-beginning-position)
   nil "[space] Clears ruler"))

(global-set-key "\M-7" 'column-ruler)

(defun increment-number-at-point ()
  "Increment the number at point"
  (interactive)
  (skip-chars-backward "0123456789")
  (or (looking-at "[0123456789]+")
      (error "No number at point"))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))

(global-set-key "\M-0" 'increment-number-at-point)

(defun decrement-number-at-point ()
  "Decrement number at point"
  (interactive)
  (skip-chars-backward "0123456789")
  (or (looking-at "[0123456789]+")
      (error "No number at point"))
  (replace-match (number-to-string (1- (string-to-number (match-string 0))))))

(global-set-key "\M-9" 'decrement-number-at-point)

;; mapping function keys
(global-set-key [f1] 'info)
(global-set-key [f2] 'ansi-term)
(global-set-key [f3] 'mode-compile)
(global-set-key [f4] 'gdb)

;; insert the date, the time, and the date and time at point. Insert
;; the date 31 days hence at point, eventually...
(defvar insert-time-format "%T"
  "*Format for \\[insert-time] (c.f. 'format-time-string' for how to format).")

(defvar insert-date-format "%Y%m%d"
  "*Format for \\[insert-date] (c.f. 'format-time-string' for how to
 format).")

(defun insert-time ()
  "Insert the current time according to the variable \"insert-time-format\"."
  (interactive "*")
  (insert (format-time-string insert-time-format
			      (current-time))))
(defun insert-date ()
  "Insert the current date according to the variable \"insert-date-format\"."
  (interactive "*")
  (insert (format-time-string insert-date-format
			      (current-time))))

(defun insert-time-and-date ()
  "Insert the current date according to the variable
 \"insert-date-format\", then a space, then the current time according
 to the variable \"insert-time-format\"."
  (interactive "*")
  (progn
    (insert-date)
    (insert " ")
    (insert-time)))

(global-set-key [f5] 'insert-date)
(global-set-key [f6] 'insert-time)
(global-set-key [f7] 'insert-time-and-date)

(defun insert-name-and-email()
  (interactive)
  "Insert my signature at point."
  (insert (concat user-full-name " <" user-mail-address ">")))

(global-set-key [f8] 'insert-name-and-email)

(setq gpl-header "This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
USA.
")

(defun insert-gpl-header ()
  "Insert standard GPL header at point."
  (interactive)
  (let ((mark (point)))
    (insert gpl-header)
    (comment-region mark (+ mark (length gpl-header)))))

(global-set-key [f9] 'insert-gpl-header)

  
;; ManHtml
;; source:
;;   http://www.emacswiki.org/cgi-bin/wiki/ManHtml
(setq man-local-alist
      '(
	;; GNU
	("gnulib" "http://cvs.savannah.gnu.org/viewcvs/*checkout*/gnulib/gnulib/MODULES.html?rev=HEAD&content-type=text/html")
	("automake" "http://sources.redhat.com/automake/automake.html")
	("libool" "http://www.gnu.org/software/libtool/manual.html")
	("autoconf" "http://www.gnu.org/software/autoconf/manual/")

	;; Perl
	("cpan" "http://search.cpan.org/")
	("acpan" "http://www.annocpan.org/")

	;; Java
	("java2" "http://java.sun.com/j2se/1.4.2/docs/api/")
	("java5" "http://java.sun.com/j2se/1.5.0/docs/api/") 

	;; Other
	("svn" "http://svnbook.red-bean.com/nightly/en/index.html")
	("gapil" "http://www.lilik.it/~mirko/gapil/gapil.html")
	("html" "~/doc/books/html/index.html")
	("dfa" "http://dfa.slackware.it")

	;; GNU Emacs
	("muse" "http://www.mwolson.org/static/doc/muse.html")
	("emacswiki" "http://www.emacswiki.org/cgi-bin/wiki/SiteMap")))

(defun man-local (what)
  "Browse HTML documentation according to man-local-alist"
  (interactive
   (let ((page (completing-read (format "What? (default %s): "
					(thing-at-point 'word))
				man-local-alist nil t)))
     (list page)))
  (browse-url (cadr (assoc what man-local-alist))))

(global-set-key [f10] 'man-local)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Handy macros

(setq local-vars "Local Variables:\n\nEnd:\n") ;; TODO: better with skeletons

(defun insert-local-variables ()
  "Insert local variables section at point"
  (interactive)
  (let ((mark (point)))
    (insert local-vars)
    (comment-region mark (+ mark (length local-vars)))))

(defun count-words-buffer ()
  "Print the number of words in the buffer in the minibuffer"
  (interactive)
  (save-excursion
    (let ((count 0))
      (goto-char (point-min))
      (while (< (point) (point-max))
	(forward-word)
	(setq count (1+ count)))
      (message "Buffer contains %d words." count))))

(defun ascii-table ()
  "Display basic ASCII table (0 thru 127)"
  (interactive)
  (switch-to-buffer "*ASCII*")
  (erase-buffer)
  (save-excursion (let ((i -1))
		    (insert "ASCII characters 0 thru 127.\n\n")
		    (insert " Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char\n")
		    (while (< i 31)
		      (insert (format "%4x %4d %4s | %4x %4d %4s | %4x %4d %4s | %4x %4d %4s\n"
				      (setq i (+ 1  i)) i (single-key-description i)
				      (setq i (+ 32 i)) i (single-key-description i)
				      (setq i (+ 32 i)) i (single-key-description i)
				      (setq i (+ 32 i)) i (single-key-description i)))
		      (setq i (- i 96)))))
  (toggle-read-only 1))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nopaste.pl interface
;;
;;   see also http://dfa.slackware.it/projects/perl-snippets/nopaste.pl

(defun nopaste-region-to-file (start end)
  "Save current region in a temporarily file and return the filename as string"
  (let ((filename (make-temp-file "nopaste")))
    (write-region start end filename) ;; thanks to exg
    filename))

(defun nopaste-send (file)
  "Send the file to nopaste (using nopaste.pl), the open the default browser
   to the resulting page."
  (browse-url 
   (substring 
    (shell-command-to-string (concat "nopaste.pl" " " file)) 0 -1)))

(defun nopaste-region (start end)
  "Send the current region to nopaste."
  (interactive "r")
  (nopaste-send (nopaste-region-to-file start end)))

(defun nopaste-buffer ()
  "Send the current buffer to nopaste."
  (interactive)
  (nopaste-send (buffer-file-name)))

;; helpers (non interactive)
(defmacro join (join-char &rest others)
  "join as in perl"
  `(mapconcat 'identity ',others ,join-char))

(defun string-repeat (str times)
  "As the x operator in perl"
  (let ((res ""))
    (let ((i 0))
      (while (< i times)
	(setq res (concat str res))
	(setq i (+ i 1)))) 
    res))

(defun secure-string-match(regexp string)
  "prevent string-match to receive a nil as string" ;; FIXME
  (if (not (eq string nil))
      (string-match regexp buffer-file-name)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mode-compile

(global-set-key "\C-c\C-c" 'mode-compile)
(global-set-key "\C-c\C-k" 'mode-compile-kill)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; emacs-lisp

;; enter emacs-lisp-mode when opening a file named 'dotemacs'
(require 'bytecomp)

(defun compile-dotemacs ()
  "Compile the dotemacs file"
  (interactive)
  (if (string= (buffer-file-name)
	       (expand-file-name (concat
				  default-directory "dotemacs")))
      (byte-compile-file (buffer-file-name))))

;; autocompile dotemacs at save
(add-hook 'after-save-hook 'compile-dotemacs)

;; use emacs-lisp-mode for dotemacs
(add-to-list 'auto-mode-alist '("dotemacs" . emacs-lisp-mode))

;; keybindings
(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    ;; rebind lisp-complete-symbol to M-]
	    (local-set-key "\M-]" 'lisp-complete-symbol)))

;; templates
(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    ;; add-hook
	    (define-skeleton elisp-skeleton-add-hook
	      "Insert an add-hook block" nil
	      > "(add-hook '" _ "\n"
	      > "(lambda ()\n"
	      > "))")

	    ;; defun
	    (define-skeleton elisp-skeleton-defun
	      "Insert a defun" nil
	      > "(defun " _ " ()\n"
	      > "  \"\"\n"
	      > ")")

	    ;; setq
	    (define-skeleton elisp-skeleton-setq
	      "Insert setq " nil
	      > "(setq " _ ")\n")

	    ;; new section
	    (define-skeleton elisp-skeleton-new-section
	      "Insert a new section (just a comment :-) " nil
	      > (concat (string-repeat ";" 80) "\n;; ") _ "")

	    ;; mapping skeletons
	    (local-set-key "\C-cih" 'elisp-skeleton-add-hook)
	    (local-set-key "\C-cid" 'elisp-skeleton-defun)
	    (local-set-key "\C-cis" 'elisp-skeleton-setq)
	    (local-set-key "\C-cin" 'elisp-skeleton-new-section)

	    ;; end
	    (setq skeleton-end-hook nil)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Customizations for all modes in CC mode

;; useful minor modes
(add-hook 'c-mode-common-hook
	  (lambda ()
	    (c-subword-mode 1)
	    (c-toggle-hungry-state 1)
	    (c-toggle-auto-newline 1)))

;; to automatically fill comments but not code
(add-hook 'c-mode-common-hook
	  (lambda ()
	    (auto-fill-mode 1)
	    (set (make-local-variable 'fill-nobreak-predicate)
		 (lambda ()
		   (not (eq (get-text-property (point) 'face)
			    'font-lock-comment-face))))))

;; common skeletons
(add-hook 'c-mode-common-hook
	  (lambda ()
	    ;; do-while
	    (define-skeleton c-common-skeleton-do
	      "Insert a do-while block" nil
	      > "do {"\n
	      _ \n
	      -4"} while ();")

	    ;; while
	    (define-skeleton c-common-skeleton-while
	      "Insert a while block" nil
	      >"while (" _ ") {"\n
	      \n
	      -4"}")

	    ;; for
	    (define-skeleton c-common-skeleton-for
	      "Insert a for block" nil
	      > "for (" _ ";;) {"\n
	      \n
	      -4"}")

	    ;; switch
	    (define-skeleton c-common-skeleton-switch
	      "Insert a switch block" nil
	      > "switch (" _ ") {"\n
	      \n
	      "default:"\n
	      -4"}")

	    ;; if
	    (define-skeleton c-common-skeleton-if
	      "Insert an if block" nil
	      > "if (" _ ") {"\n
	      \n
	      -4"}")

	    ;; else
	    (define-skeleton c-common-skeleton-else
	      "Insert an else block" nil
	      > "else {"\n
	      _ \n
	      -4"}")

	    ;; else if
	    (define-skeleton c-common-skeleton-else-if
	      "Insert an else-if block" nil
	      > "else if(" _ ") {"\n
	      \n
	      -4"}")

	    ;; mapping skeletons
	    (local-set-key "\C-cid" 'c-common-skeleton-do)
	    (local-set-key "\C-ciw" 'c-common-skeleton-while)
	    (local-set-key "\C-cif" 'c-common-skeleton-for)
	    (local-set-key "\C-cis" 'c-common-skeleton-switch)
	    (local-set-key "\C-cii" 'c-common-skeleton-if)
	    (local-set-key "\C-cie" 'c-common-skeleton-else)
	    (local-set-key "\C-cil" 'c-common-skeleton-else-if)

	    ;; end
	    (setq skeleton-end-hook nil)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; c-mode

;; style and other generic stuff
(add-hook 'c-mode-hook
	  (lambda ()
	    ;; My C style
	    (defconst my-c-style
	      '(
		(c-tab-always-indent . t)
		(c-tab-width . 4)
		(c-indent-tabs-mode . 1)
		(c-basic-offset . 4)
		(comment-multi-line t)
		)
	      "My C Programming Style")

	    ;; add my personal style and set it for the current buffer
	    (c-add-style "mine" my-c-style t)

	    ;; setting # behavior
	    (setq c-electric-pound-behavior '(alignleft))))

;; FlyMake
(add-hook 'c-mode-hook
	  (lambda ()
	    (load-library "flymake")

	    ;; loads flymake when possible
	    (add-hook 'find-file-hooks 'flymake-find-file-hook)

	    ;; disable GUI warnings
	    (setq flymake-gui-warnings-enabled nil)

	    ;; speedup
	    (setq flymake-start-syntax-check-on-newline nil)

	    ;; a somewhat handy function
	    (defun my-flymake-show-next-error()
	      (interactive)
	      (flymake-goto-next-error)
	      (flymake-display-err-menu-for-current-line))

	    ;; bind it to C-c C-v
	    (local-set-key "\C-c\C-v" 'my-flymake-show-next-error)))

;; move whole functions around...
(defun my-move-function-up ()
  "Swap the current (whole) function with the function above."
  (interactive)
  (c-mark-function)
  (kill-region (region-beginning) (region-end))
  (c-beginning-of-defun 1)
  (yank))

(defun my-move-function-down ()
  "Swap the current (whole) function with the function below."
  (interactive)
  (c-mark-function)
  (kill-region (region-beginning) (region-end))
  (c-beginning-of-defun -1)
  (yank))

(add-hook 'c-mode-hook
	  (lambda ()
	    (local-set-key "\C-cd" 'my-move-function-up)
	    (local-set-key "\C-cf" 'my-move-function-down)))

;; c preprocessor
(setq c-macro-shrink-window-flag t)
(setq c-macro-prompt-flag nil)
(setq c-macro-preprocessor "cpp -C")

;; .l, .gperf and .tc uses c-mode
(add-to-list 'auto-mode-alist '("\\.l$" . c-mode))
(add-to-list 'auto-mode-alist '("\\.gperf$" . c-mode))
(add-to-list 'auto-mode-alist '("\\.tc$" . c-mode))

;; disable auto-state on .y, .l, .tc or .gperf files
(add-hook 'c-mode-hook
	  (lambda ()
	    (mapc (lambda (r)
		    (when (secure-string-match r buffer-file-name)
		      (c-toggle-auto-state -1)))
		  '("\\.l$" "\\.y$" "\\.tc$" "\\.gperf"))))

;; disable flymake-mode for .h files
(add-hook 'c-mode-hook
	  (lambda ()
	    (mapc (lambda (r)
		    (when (secure-string-match r buffer-file-name)
		      (flymake-mode -1)))
		  '("\\.h$"))))

;; highlight %option for .l, .y and .tc files
(add-hook 'c-mode-hook
	  (lambda ()
	    (mapc (lambda (r)
		    (when (secure-string-match r buffer-file-name)
		      (font-lock-add-keywords nil
	      '(("%\\<\\(option\\)\\>" 1 font-lock-warning-face prepend)))))
		  '("\\.l$" "\\.y$" "\\.tc$"))))

;; highlight for treecc files
(add-hook 'c-mode-hook
	  (lambda ()
	    (mapc (lambda (r)
		    (when (secure-string-match r buffer-file-name)
		      (font-lock-add-keywords nil
					      '(("%\\<\\(abstract\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(node\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(virtual\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(inline\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(split\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(include\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(operation\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(nocreate\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(decls\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(both\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(end\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(readonly\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(header\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(output\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(outdir\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(common\\)\\>" 1 font-lock-keyword-face prepend)))))
		  '("\\.tc$"))))

;; highlight for bison files
(add-hook 'c-mode-hook
	  (lambda () 
	    (mapc (lambda (r)
		    (when (secure-string-match r buffer-file-name)
		      (font-lock-add-keywords nil
					      '(("%\\<\\(prec\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(token\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(left\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(right\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(nonassoc\\)\\>" 1 font-lock-keyword-face prepend)
						("%\\<\\(type\\)\\>" 1 font-lock-keyword-face prepend)
						("\\<\\(error\\)\\>" 1 font-lock-warning-face prepend)))))
		  '("\\.y$"))))

;; C specific skeletons
(add-hook 'c-mode-hook
	  (lambda ()
	    ;; main
	    (define-skeleton c-skeleton-main
	      "Insert a main()" nil
	      > "int main(int argc, char \**argv)"\n
	      -4"{"\n
	      _ \n
	      -4"}")

	    ;; mapping skeletons
	    (local-set-key "\C-cim" 'c-skeleton-main)

	    ;; end
	    (setq skeleton-end-hook nil)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; java-mode

(add-hook 'java-mode-hook
	  (lambda ()
	    ;; My Java style
	    (defconst my-java-style
	      '(
		(c-set-style . "java")
		(c-tab-always-indent . t)
		(c-tab-width . 4)
		(c-indent-tabs-mode . 1)
		(c-basic-offset . 4)
		(c-label-offet -2)
		(comment-multi-line t)
		)
	      "My Java Programming Style")

	    ;; add my personal style and set it for the current buffer
	    (c-add-style "PERSONAL" my-java-style t)))


;; Java specific skeletons
(add-hook 'java-mode-hook
	  (lambda ()
	    ;; main
	    (define-skeleton java-skeleton-main
	      "Insert a main()" nil
	      > "public static int main(String args[])"\n
	      -4"{"\n
	      _ \n
	      -4"}")

	    ;; mapping skeletons
	    (local-set-key "\C-cim" 'java-skeleton-main)

	    ;; end
	    (setq skeleton-end-hook nil)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; cperl-mode

;; Use cperl-mode instead of the default perl-mode
(add-to-list 'auto-mode-alist '("\\.\\([pP][Llm]\\|al\\)\\'" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("perl" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("perl5" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("miniperl" . cperl-mode))

;; general configuration
(add-hook 'cperl-mode-hook
	  (lambda ()
	    ;; perldoc
	    (local-set-key "\C-c\C-f" 'cperl-perldoc)

	    ;; pod2man
	    (local-set-key "\C-c\C-v" 'cperl-pod-to-manpage)

	    ;; setting only non-invasive stuff
	    (setq cperl-hairy nil
		  abbrev-mode t		;; automatic keyword expansion
		  cperl-highlight-variables-indiscriminately t
		  cperl-auto-newline t
		  cperl-auto-newline-after-colon t
		  cperl-regexp-scan nil
		  cperl-electric-keywords t
		  cperl-electric-linefeed t
		  cperl-electric-parens nil)

	    ;; style
	    (setq cperl-set-style "PerlStyle")))


;; enabling eldoc for cperl-mode
(defun my-cperl-eldoc-documentation-function ()
  "Return meaningful doc string for `eldoc-mode'."
  (car
   (let ((cperl-message-on-help-error nil))
     (cperl-get-help))))

(add-hook 'cperl-mode-hook
	  (lambda ()
	    (eldoc-mode 1)
	    (set (make-local-variable 'eldoc-documentation-function)
		 'my-cperl-eldoc-documentation-function)))

;; enabling outline-minor-mode
(setq my-cperl-outline-regexp
      (concat
       "^"				 ;; start of line
       "[ \\t]*"			 ;; skip leading whitespace
       "\\("				 ;; begin capture group \1
       (join "\\|"
	     "=head[12]"		 ;; POD header
	     "package"			 ;; package
	     "=item"			 ;; POD item
	     "sub"			 ;; subroutine definition
	     )
       "\\)"				 ;; end capture group \1
       "\\b"				 ;; word boundary
       ))

(add-hook 'cperl-mode-hook
	  (lambda ()
	    (outline-minor-mode)

	    (defun cperl-outline-level ()
	      (looking-at outline-regexp)
	      (let ((match (match-string 1)))
		(cond
		 ((eq match "=head1" ) 1)
		 ((eq match "package") 2)
		 ((eq match "=head2" ) 3)
		 ((eq match "=item"  ) 4)
		 ((eq match "sub"    ) 5)
		 (t 7))))

	    (setq cperl-outline-regexp  my-cperl-outline-regexp)
	    (setq outline-regexp        cperl-outline-regexp)
	    (setq outline-level        'cperl-outline-level)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Muse

;; my homepage (http://dfa.slackware.it)
(when (string-equal (getenv "USER") "dfa") 
  (when (file-exists-p "~/code/homepage/trunk/homepage.el")
    (load-library "~/code/homepage/trunk/homepage.el")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; html-mode

(add-hook 'html-mode-hook
	  (lambda ()
	    ;; using tidy as html validator
	    (setq sgml-validate-command "tidy -qe")

	    ;; setting indent-line-function
	    (setq indent-line-function 'indent-relative)
 
	    ;; mapping C-c C-c to sgml-validate
	    (local-set-key "\C-c\C-c" 'sgml-validate)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; m4-mode

;; autotest
(add-to-list 'auto-mode-alist '("\\.at$" . m4-mode))

;; highlight autotest macros
(add-hook 'm4-mode-hook
	  `(lambda ()
	     (font-lock-add-keywords 
	      nil 
	      '((,(regexp-opt (list "AT_CHECK"
				    "AT_BANNER"
				    "AT_DATA"
				    "AT_CLEANUP"
				    "AT_SETUP")) 
		 0 font-lock-keyword-face
		 prepend)))))

;; autotest skeletons
(add-hook 'm4-mode-hook
	  (lambda ()
	    ;; new-test
	    (define-skeleton at-insert-test-skeleton
	      "Insert a test" nil
	      > "AT_SETUP([" _ "])"\n
	      "AT_DATA([], [["\n
	      "]])"\n
	      "AT_CHECK([], [0])"\n
	      "AT_CLEANUP"\n\n)

	    (local-set-key "\C-ct" 'at-insert-test-skeleton)

	    ;; end
	    (setq skeleton-end-hook nil)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; muse-mode

(add-hook 'muse-mode-hook
 (lambda ()
   ;; redefine insert-date
   (defun insert-date ()
     "Insert the current date according to the variable \"insert-date-format\"."
     (interactive "*")
     (insert "* ")
     (insert (format-time-string insert-date-format
				 (current-time)))
     (insert ": "))

   ;; rebind to F5
   (local-set-key [f5] 'insert-date)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; text-mode

;; enabling auto-fill-mode with text-mode
(add-hook 'text-mode-hook
	  '(lambda ()
	     (auto-fill-mode 1)))

;; enter text-mode when opening a file named 'README', 'INSTALL' and so on
(add-to-list 'auto-mode-alist '("README" . text-mode))
(add-to-list 'auto-mode-alist '("INSTALL" . text-mode))
(add-to-list 'auto-mode-alist '("NEWS" . text-mode))
(add-to-list 'auto-mode-alist '("TODO" . text-mode))
(add-to-list 'auto-mode-alist '("AUTHORS" . text-mode))
(add-to-list 'auto-mode-alist '("THANKS" . text-mode))
(add-to-list 'auto-mode-alist '("COPYING" . text-mode))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  X window stuff

(when window-system
  ;; display various non-editing buffers in their own frames
  (setq special-display-buffer-names
	(nconc '("*Backtrace*"
		 "*vc-change-log*"
		 "*VC-log*")
	       special-display-buffer-names))

  ;; display those special buffer frames without a tool bar
  (setq special-display-frame-alist nil)
  (add-to-list 'special-display-frame-alist '(tool-bar-lines . 0))
  (add-to-list 'special-display-frame-alist '(menu-bar-lines . 0))
  (add-to-list 'special-display-frame-alist '(height . 10))
  (add-to-list 'special-display-frame-alist '(width . 80))
  (add-to-list 'special-display-frame-alist '(unsplittable . t))

  ;; customizing frame look
  (add-to-list 'default-frame-alist '(cursor-color . "grey"))
  (add-to-list 'default-frame-alist '(foreground-color . "grey"))
  (add-to-list 'default-frame-alist '(background-color . "black"))

  ;; disabling the toolbar and the scrollbar
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; enabling my wheeled trackball
  (mouse-wheel-mode 1)

  ;; setting a decent wheel behavior
  (setq mouse-progressive-speed nil)
  (setq mouse-wheel-progressive-speed nil)
  (setq scroll-step 1)
  (setq scroll-conservatively 1))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Console stuff

;; display time in modeline only when in text-mode
(when (not window-system)
  ;; show time, load level and mail flag in mode lines
  (display-time-mode))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Server stuff

(add-hook 'server-switch-hook
	  (lambda ()
	    (let ((server-buf (current-buffer)))
	      (bury-buffer)
	      (switch-to-buffer-other-frame server-buf))))

(add-hook 'server-done-hook 
	  'delete-frame)

(add-hook 'server-done-hook
	  (lambda ()
	    (kill-buffer nil)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gentoo specific

(when (file-exists-p "/usr/share/emacs/site-lisp/site-gentoo.el")
  (load "/usr/share/emacs/site-lisp/site-gentoo"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Cleanups

(setq debug-on-error nil)
